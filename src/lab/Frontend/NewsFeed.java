/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package lab.Frontend;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Image;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Map;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSeparator;
import javax.swing.border.TitledBorder;
import lab.pkg9.Content;
import lab.pkg9.ContentCreator;
import lab.pkg9.Database;
import lab.pkg9.DatabaseFactory;
import lab.pkg9.FriendManager;
import lab.pkg9.FriendshipService;
import lab.pkg9.GroupDatabase;
import lab.pkg9.GroupDatabaseFactory;
import lab.pkg9.User;
import lab.pkg9.UserManager;
import lab.pkg9.Group;
import lab.pkg9.GroupAdmin;
import lab.pkg9.GroupCoAdmin;
import lab.pkg9.GroupManager;
import lab.pkg9.GroupRole;
import lab.pkg9.Post;
//import lab.pkg9.;

/**
 *
 * @author Dell
 */
public final class NewsFeed extends javax.swing.JFrame {

    /**
     * Creates new form NewsFeed
     *
     * @param user
     */
    Database database;
    GroupDatabase groupDatabase;
    User user;
    FriendshipService friendService;
    GroupManager groupManager;
    ArrayList<Content> allPosts = new ArrayList<>();

    public NewsFeed(User user) {
        setContentPane(new JLabel(new ImageIcon("R (2).jpg")));
        initComponents();
        ImageIcon originalIcon = new javax.swing.ImageIcon(user.getProfile().getProfilePhotoPath());
        Image scaledImage = originalIcon.getImage().getScaledInstance(50, 50, java.awt.Image.SCALE_SMOOTH);
        profile.setIcon(new ImageIcon(scaledImage));
        this.database = DatabaseFactory.createDatabase();
        this.groupDatabase = GroupDatabaseFactory.createDatabase();
        this.user = user;
        friendService = new FriendshipService(user);
        groupManager = new GroupManager(user);

        loadnewsfeed();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        Friendpostspanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        container2Panel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        ContainerPanel1 = new javax.swing.JPanel();
        Refresh_button = new javax.swing.JButton();
        create_content_button = new javax.swing.JButton();
        friend_managment_button = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        Notifications_panel = new javax.swing.JPanel();
        ViewStories = new javax.swing.JToggleButton();
        viewFriendSuggestions = new javax.swing.JToggleButton();
        search = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        searchContainer = new javax.swing.JPanel();
        profile = new javax.swing.JButton();
        viewGroupSuggestions = new javax.swing.JToggleButton();
        jToggleButton3 = new javax.swing.JToggleButton();
        jToggleButton4 = new javax.swing.JToggleButton();
        createGroup = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        Friendpostspanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), "Freind's Posts"));
        Friendpostspanel.setLayout(new javax.swing.BoxLayout(Friendpostspanel, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane1.setViewportView(Friendpostspanel);

        container2Panel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "Friend Stories"));
        container2Panel.setLayout(new javax.swing.BoxLayout(container2Panel, javax.swing.BoxLayout.LINE_AXIS));
        jScrollPane2.setViewportView(container2Panel);
        container2Panel.getAccessibleContext().setAccessibleName("");

        ContainerPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "Friends"));
        ContainerPanel1.setLayout(new javax.swing.BoxLayout(ContainerPanel1, javax.swing.BoxLayout.LINE_AXIS));
        jScrollPane3.setViewportView(ContainerPanel1);

        ImageIcon originalIcon =new javax.swing.ImageIcon("R.png");
        Image scaledImage = originalIcon.getImage().getScaledInstance(50, 50, java.awt.Image.SCALE_SMOOTH);
        Refresh_button.setIcon(new ImageIcon(scaledImage));
        Refresh_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Refresh_buttonActionPerformed(evt);
            }
        });

        ImageIcon originalIcon2 =new javax.swing.ImageIcon("OIP.jpeg");
        Image scaledImage2 = originalIcon2.getImage().getScaledInstance(50, 50, java.awt.Image.SCALE_SMOOTH);
        create_content_button.setIcon(new ImageIcon(scaledImage2));
        create_content_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                create_content_buttonActionPerformed(evt);
            }
        });

        ImageIcon originalIcon5 =new javax.swing.ImageIcon("image.jpeg");
        Image scaledImage5 = originalIcon5.getImage().getScaledInstance(50, 50, java.awt.Image.SCALE_SMOOTH);
        friend_managment_button.setIcon(new ImageIcon(scaledImage5));
        friend_managment_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                friend_managment_buttonActionPerformed(evt);
            }
        });

        ImageIcon originalIcon4 =new javax.swing.ImageIcon("logout-vector-icon.jpg");
        Image scaledImage4 = originalIcon4.getImage().getScaledInstance(50, 50, java.awt.Image.SCALE_SMOOTH);
        jButton1.setIcon(new ImageIcon(scaledImage4));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        Notifications_panel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("Notifications"))));
        Notifications_panel.setToolTipText("");
        Notifications_panel.setLayout(new javax.swing.BoxLayout(Notifications_panel, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane5.setViewportView(Notifications_panel);

        buttonGroup1.add(ViewStories);
        ViewStories.setText("View stories");
        ViewStories.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewStoriesActionPerformed(evt);
            }
        });

        buttonGroup1.add(viewFriendSuggestions);
        viewFriendSuggestions.setText("View friend suggestions");
        viewFriendSuggestions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewFriendSuggestionsActionPerformed(evt);
            }
        });

        search.setText("Search");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        searchContainer.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("Search Bar")));
        searchContainer.setLayout(new javax.swing.BoxLayout(searchContainer, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane4.setViewportView(searchContainer);

        profile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                profileActionPerformed(evt);
            }
        });

        buttonGroup1.add(viewGroupSuggestions);
        viewGroupSuggestions.setText("View Groups Suggestions");
        viewGroupSuggestions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewGroupSuggestionsActionPerformed(evt);
            }
        });

        buttonGroup2.add(jToggleButton3);
        jToggleButton3.setText("View Friends");
        jToggleButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton3ActionPerformed(evt);
            }
        });

        buttonGroup2.add(jToggleButton4);
        jToggleButton4.setText("View Groups");
        jToggleButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton4ActionPerformed(evt);
            }
        });

        ImageIcon originalIcon8 =new javax.swing.ImageIcon("OIP_1.jpeg");
        Image scaledImage8 = originalIcon8.getImage().getScaledInstance(50, 50, java.awt.Image.SCALE_SMOOTH);
        createGroup.setIcon(new ImageIcon(scaledImage8));
        createGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createGroupActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ViewStories, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(viewFriendSuggestions, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(viewGroupSuggestions, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 644, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 561, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jToggleButton4)
                            .addComponent(jToggleButton3)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(94, 94, 94)
                                .addComponent(Refresh_button)
                                .addGap(50, 50, 50)
                                .addComponent(profile)
                                .addGap(45, 45, 45)
                                .addComponent(create_content_button)
                                .addGap(48, 48, 48)
                                .addComponent(friend_managment_button)
                                .addGap(51, 51, 51)
                                .addComponent(jButton1)
                                .addGap(72, 72, 72)
                                .addComponent(createGroup)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(search, javax.swing.GroupLayout.DEFAULT_SIZE, 539, Short.MAX_VALUE)
                            .addComponent(jScrollPane5))
                        .addGap(12, 12, 12))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(67, 67, 67)
                            .addComponent(jToggleButton3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jToggleButton4)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(ViewStories)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewFriendSuggestions)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewGroupSuggestions))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 650, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(createGroup)
                            .addComponent(jButton1)
                            .addComponent(profile)
                            .addComponent(create_content_button)
                            .addComponent(friend_managment_button)
                            .addComponent(Refresh_button)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(search)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 503, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(16, 16, 16))
        );

        jScrollPane2.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Refresh_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Refresh_buttonActionPerformed
        ImageIcon originalIcon = new javax.swing.ImageIcon(user.getProfile().getProfilePhotoPath());
        Image scaledImage = originalIcon.getImage().getScaledInstance(50, 50, java.awt.Image.SCALE_SMOOTH);
        profile.setIcon(new ImageIcon(scaledImage));
        loadnewsfeed();
    }//GEN-LAST:event_Refresh_buttonActionPerformed


    private void create_content_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_create_content_buttonActionPerformed
        // Create a dialog
        int choice = javax.swing.JOptionPane.showOptionDialog(
                this,
                "What would you like to create?",
                "Choose Action",
                javax.swing.JOptionPane.YES_NO_OPTION,
                javax.swing.JOptionPane.QUESTION_MESSAGE,
                null,
                new String[]{"Create Post", "Create Story"},
                "Create Post"
        );

        // Handle user choice
        if (choice == javax.swing.JOptionPane.YES_OPTION) {
            // Open CreatePost JFrame
            CreatePost postFrame = new CreatePost(user);
            postFrame.setVisible(true);
        } else if (choice == javax.swing.JOptionPane.NO_OPTION) {
            // Open CreateStory JFrame
            CreateStory storyFrame = new CreateStory(user);
            storyFrame.setVisible(true);
        }
    }//GEN-LAST:event_create_content_buttonActionPerformed

    private void friend_managment_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_friend_managment_buttonActionPerformed
        FriendsPage fp = new FriendsPage(user);
        fp.setVisible(true);
    }//GEN-LAST:event_friend_managment_buttonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        UserManager.logout(user);
        this.dispose();
        StartupPage sp = new StartupPage();
        sp.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void ViewStoriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewStoriesActionPerformed
        TitledBorder title = BorderFactory.createTitledBorder("Friend Stories");
        container2Panel.setBorder(title);
        loadfriendstories();

    }//GEN-LAST:event_ViewStoriesActionPerformed

    private void viewFriendSuggestionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewFriendSuggestionsActionPerformed
        TitledBorder title = BorderFactory.createTitledBorder("Friend Suggestions");
        container2Panel.setBorder(title);
        loadFriendSuggestions();
                }//GEN-LAST:event_viewFriendSuggestionsActionPerformed
    // TODO add your handling code here:


    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        searchContainer.removeAll(); // Clear previous results
        String searchText = jTextField1.getText().trim();
        if (searchText.isEmpty()) {
            System.out.println("Wrong search input");
            javax.swing.JOptionPane.showMessageDialog(this,
                    "Invalid input. Please enter a text",
                    "Error",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
            return; // Exit early for invalid input
        }

        ArrayList<User> userFriends = new ArrayList<>();
        ArrayList<User> userNonFriends = new ArrayList<>();
        ArrayList<User> userSentFriends = new ArrayList<>();
        ArrayList<User> userRecievedFriends = new ArrayList<>();
        ArrayList<User> userBlockedFriends = new ArrayList<>();
        FriendManager friendManager = (FriendManager) user.getFriendManager();
        // Categorize users into friends and non-friends
        for (User userInSearch : database.getUsers()) {
            if (!userInSearch.getUserId().equals(user.getUserId()) && userInSearch.getUsername().toLowerCase().contains(searchText.toLowerCase())) {
                if (friendManager.getFriendList().contains(userInSearch.getUserId())) {
                    userFriends.add(userInSearch); // viewprofile block remove 
                } else if (user.getFriendRequestManagable().getSentFriendRequests().containsKey(userInSearch.getUserId())) {
                    if (user.getFriendRequestManagable().getSentFriendRequests().get(userInSearch.getUserId()).equalsIgnoreCase("Pending")) {
                        userSentFriends.add(userInSearch); // viewprofile block
                    }
                } else if (user.getFriendRequestManagable().getReceivedFriendRequests().containsKey(userInSearch.getUserId())) {
                    if (user.getFriendRequestManagable().getReceivedFriendRequests().get(userInSearch.getUserId()).equalsIgnoreCase("Pending")) {
                        userRecievedFriends.add(userInSearch); // viewprofile block accept decline
                    }
                } else if (friendManager.getBlockedList().contains(userInSearch.getUserId())) {
                    userBlockedFriends.add(userInSearch);            //(username of userInSearch) is blocked appears in searchcontainer
                } else if (!userInSearch.getFriendManager().getBlockedList().contains(user.getUserId())) {
                    userNonFriends.add(userInSearch); // viewprofile block add
                }
            }
        }

        ArrayList<Group> admingroups = new ArrayList<>();
        ArrayList<Group> joinedgroups = new ArrayList<>();
        ArrayList<Group> requestedgroups = new ArrayList<>();
        ArrayList<Group> restOfgroups = new ArrayList<>();
        for (Group groupInSearch : groupDatabase.loadGroups()) {
            if (groupInSearch.getName().toLowerCase().contains(searchText.toLowerCase())) {
                if (user.getGroups().containsKey(groupInSearch.getGroupId())) {
                    if (groupInSearch.getAdminId().equals(user.getUserId())) {
                        admingroups.add(groupInSearch);
                    } else {
                        joinedgroups.add(groupInSearch);
                    }
                } else if (groupInSearch.getGroupRequests().contains(user.getUserId())) {
                    requestedgroups.add(groupInSearch);

                } else {
                    restOfgroups.add(groupInSearch);
                }
            }
        }

        // Display friends
        userFriends.forEach(friend -> {
            JPanel entryPanel = createFriendPanel(friend);
            searchContainer.add(entryPanel);
            JSeparator separator = new JSeparator();
            searchContainer.add(separator, BorderLayout.SOUTH);

        });

        admingroups.forEach(group -> {
            JPanel entryPanel = adminGroupPanel(group);
            searchContainer.add(entryPanel);
            JSeparator separator = new JSeparator();
            searchContainer.add(separator, BorderLayout.SOUTH);
        });

        joinedgroups.forEach(group -> {
            JPanel entryPanel = joinedGroupPanel(group);
            searchContainer.add(entryPanel);
            JSeparator separator = new JSeparator();
            searchContainer.add(separator, BorderLayout.SOUTH);
        });

        userSentFriends.forEach(friend -> {
            JPanel entryPanel = createFriendSentPanel(friend);
            searchContainer.add(entryPanel);
            JSeparator separator = new JSeparator();
            searchContainer.add(separator, BorderLayout.SOUTH);
        });

        requestedgroups.forEach(group -> {
            JPanel entryPanel = requestedGroupPanel(group);
            searchContainer.add(entryPanel);
            JSeparator separator = new JSeparator();
            searchContainer.add(separator, BorderLayout.SOUTH);
        });

        userRecievedFriends.forEach(friend -> {
            JPanel entryPanel = createFriendRecievePanel(friend);
            searchContainer.add(entryPanel);
            JSeparator separator = new JSeparator();
            searchContainer.add(separator, BorderLayout.SOUTH);
        });

        // Display blocked users
        userBlockedFriends.forEach(blockedUser -> {
            JPanel blockedPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
            JLabel messageLabel = new JLabel(blockedUser.getUsername() + "   is blocked");
            blockedPanel.add(messageLabel);
            searchContainer.add(blockedPanel);
            JSeparator separator = new JSeparator();
            searchContainer.add(separator, BorderLayout.SOUTH);
        });

        // Display non-friends with suggestion panels
        userNonFriends.forEach(nonFriend -> {
            JPanel entryPanel = createSuggestionPanel(nonFriend);
            searchContainer.add(entryPanel);
            JSeparator separator = new JSeparator();
            searchContainer.add(separator, BorderLayout.SOUTH);

        });

        restOfgroups.forEach(group -> {
            JPanel entryPanel = restOfGroupPanel(group);
            searchContainer.add(entryPanel);
            JSeparator separator = new JSeparator();
            searchContainer.add(separator, BorderLayout.SOUTH);
        });

        // Refresh UI
        searchContainer.revalidate();
        searchContainer.repaint();
    }//GEN-LAST:event_searchActionPerformed

    public JPanel adminGroupPanel(Group groupInSearch) {

        String profileImagePath = (groupInSearch.getGroupPhoto() != null)
                ? groupInSearch.getGroupPhoto()
                : null;
        EntryPanel entryPanel = new EntryPanel(groupInSearch.getName(), profileImagePath);
        entryPanel.setPreferredSize(new Dimension(200, 100));

        JButton viewGroupButton = new JButton("View Group");
        JButton leaveGroupButton = new JButton("Leave Group");
        JButton deleteGroupButton = new JButton("Delete Group");

        viewGroupButton.addActionListener(e -> {
            GroupPage gp = new GroupPage(groupInSearch, user);
            gp.setVisible(true);
        });
        leaveGroupButton.addActionListener(e -> {
            GroupAdmin groupRole = (GroupAdmin) user.getGroups().get(groupInSearch.getGroupId());
            System.out.println(groupInSearch.getUsers());
            if (groupInSearch.getUsers().isEmpty()) {
                groupRole.deleteGroup();
                entryPanel.remove(deleteGroupButton);
                entryPanel.remove(viewGroupButton);
                entryPanel.remove(leaveGroupButton);
                entryPanel.add(new JLabel("Left ... Group Deleted (No Members in the Group)"));
                entryPanel.setFont(new Font("Arial", Font.PLAIN, 14));

            } else {
                nextAdmin na = new nextAdmin(groupInSearch, groupRole);
                na.setVisible(true);
            }
        });
        deleteGroupButton.addActionListener(e -> {
            GroupAdmin groupRole = (GroupAdmin) user.getGroups().get(groupInSearch.getGroupId());
            groupRole.deleteGroup();
            entryPanel.remove(deleteGroupButton);
            entryPanel.add(new JLabel("Deleted"));
            entryPanel.setFont(new Font("Arial", Font.PLAIN, 14));
            entryPanel.revalidate();
            entryPanel.repaint();
        });

        entryPanel.add(viewGroupButton);
        entryPanel.add(leaveGroupButton);
        entryPanel.add(deleteGroupButton);
        return entryPanel;
    }

    public JPanel joinedGroupPanel(Group groupInSearch) {

        String profileImagePath = (groupInSearch.getGroupPhoto() != null)
                ? groupInSearch.getGroupPhoto()
                : null;
        EntryPanel entryPanel = new EntryPanel(groupInSearch.getName(), profileImagePath);
        entryPanel.setPreferredSize(new Dimension(200, 100));

        JButton viewGroupButton = new JButton("View Group");
        JButton leaveGroupButton = new JButton("Leave Group");

        viewGroupButton.addActionListener(e -> {
            GroupPage gp = new GroupPage(groupInSearch, user);
            gp.setVisible(true);
        });
        leaveGroupButton.addActionListener(e -> {
            GroupRole groupRole = user.getGroups().get(groupInSearch.getGroupId());
            groupRole.leaveGroup();
            entryPanel.remove(leaveGroupButton);
            entryPanel.add(new JLabel("Left"));
            entryPanel.setFont(new Font("Arial", Font.PLAIN, 14));
            entryPanel.revalidate();
            entryPanel.repaint();
        });

        entryPanel.add(viewGroupButton);
        entryPanel.add(leaveGroupButton);
        return entryPanel;
    }

    public JPanel requestedGroupPanel(Group groupInSearch) {
        String profileImagePath = (groupInSearch.getGroupPhoto() != null)
                ? groupInSearch.getGroupPhoto()
                : null;
        EntryPanel entryPanel = new EntryPanel(groupInSearch.getName(), profileImagePath);
        entryPanel.setPreferredSize(new Dimension(200, 100));
        JButton viewGroupButton = new JButton("View Group");
        JLabel statusLabel = new JLabel("   Requested To Join");

        viewGroupButton.addActionListener(e -> {
            GroupPage gp = new GroupPage(groupInSearch, user);
            gp.setVisible(true);
        });
        entryPanel.add(viewGroupButton);
        entryPanel.add(statusLabel);

        return entryPanel;
    }

    public JPanel restOfGroupPanel(Group groupInSearch) {
        String profileImagePath = (groupInSearch.getGroupPhoto() != null)
                ? groupInSearch.getGroupPhoto()
                : null;
        EntryPanel entryPanel = new EntryPanel(groupInSearch.getName(), profileImagePath);
        entryPanel.setPreferredSize(new Dimension(200, 100));
        JButton viewGroupButton = new JButton("View Group");
        JButton requestToJoinButton = new JButton("   Request   ");

        viewGroupButton.addActionListener(e -> {
            GroupPage gp = new GroupPage(groupInSearch, user);
            gp.setVisible(true);
        });
        requestToJoinButton.addActionListener(e -> {
            GroupManager.requestToJoin(user, groupInSearch);
            entryPanel.remove(requestToJoinButton);
            entryPanel.add(new JLabel("Requested")).setFont(new Font("Arial", Font.PLAIN, 14));
            entryPanel.revalidate();
            entryPanel.repaint();
        });
        //entryPanel.add(Box.createRigidArea(new Dimension(1, 0)));
        entryPanel.add(viewGroupButton);
        entryPanel.add(requestToJoinButton);

        return entryPanel;
    }


    private void profileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_profileActionPerformed
        UpdateProfile p = new UpdateProfile(user, database);
        p.setVisible(true);
    }//GEN-LAST:event_profileActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        UserManager.logout(user);
        this.dispose();

    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

    }//GEN-LAST:event_formWindowClosing

    private void viewGroupSuggestionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewGroupSuggestionsActionPerformed
        TitledBorder title = BorderFactory.createTitledBorder("Groups Suggestions");
        container2Panel.setBorder(title);
        loadGroupSuggestions();
    }//GEN-LAST:event_viewGroupSuggestionsActionPerformed

    private void jToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton3ActionPerformed
        TitledBorder title = BorderFactory.createTitledBorder("friends");
        ContainerPanel1.setBorder(title);
        loadFriends();
    }//GEN-LAST:event_jToggleButton3ActionPerformed

    private void jToggleButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton4ActionPerformed
        TitledBorder title = BorderFactory.createTitledBorder("Groups");
        ContainerPanel1.setBorder(title);
        loadGroups();
    }//GEN-LAST:event_jToggleButton4ActionPerformed

    private void createGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createGroupActionPerformed
        CreateGroup createGroupp = new CreateGroup(user.getUserId());
        createGroupp.setVisible(true);
    }//GEN-LAST:event_createGroupActionPerformed

// Helper method to create a panel for friends
    private JPanel createFriendPanel(User friend) {
        String profileImagePath = (friend.getProfile() != null)
                ? friend.getProfile().getProfilePhotoPath()
                : null;
        EntryPanel entryPanel = new EntryPanel(friend.getUsername(), profileImagePath);
        entryPanel.setPreferredSize(new Dimension(200, 100));

        JButton viewProfileButton = new JButton("View Profile");
        JButton removeButton = new JButton("Remove");
        JButton blockButton = new JButton("Block");

        // Event for viewing the friend's profile
        viewProfileButton.addActionListener(evt -> {
            UserProfile userProfile = new UserProfile(friend);
            userProfile.setVisible(true);
            System.out.println("Viewing profile of " + friend.getUsername());
        });

        // Event for removing a friend
        removeButton.addActionListener(evt -> {
            user.getFriendManager().removeFriend(user, friend);
            database.saveUsersToFile();
            entryPanel.remove(removeButton);
            entryPanel.remove(blockButton);
            entryPanel.add(new JLabel("Removed")).setFont(new Font("Arial", Font.PLAIN, 14));
            entryPanel.add(blockButton);
            entryPanel.repaint(); // Update UI after removing
        });

        blockButton.addActionListener(evt -> {
            friendService.blockFriend(friend);
            entryPanel.remove(viewProfileButton);
            entryPanel.remove(blockButton);
            entryPanel.add(new JLabel("Blocked")).setFont(new Font("Arial", Font.PLAIN, 14));
            entryPanel.revalidate();
            entryPanel.repaint(); // Update UI after blocking
        });

        // Add components to the panel
        entryPanel.add(viewProfileButton);
        entryPanel.add(removeButton);
        entryPanel.add(blockButton);
        return entryPanel;
    }
// Helper method to create a panel for sent friend requests

    private JPanel createFriendSentPanel(User friend) {
        // Create a horizontal panel for displaying sent friend requests
        String profileImagePath = (friend.getProfile() != null)
                ? friend.getProfile().getProfilePhotoPath()
                : null;
        EntryPanel entryPanel = new EntryPanel(friend.getUsername(), profileImagePath);
        entryPanel.setPreferredSize(new Dimension(200, 100));

        JButton viewProfileButton = new JButton("View Profile");
        JButton blockButton = new JButton("Block");

        // Event for viewing the friend's profile
        viewProfileButton.addActionListener(evt -> {
            UserProfile userProfile = new UserProfile(friend);
            userProfile.setVisible(true);
            System.out.println("Viewing profile of " + friend.getUsername());
        });

        blockButton.addActionListener(evt -> {
            friendService.blockFriend(friend);
            entryPanel.remove(viewProfileButton);
            entryPanel.remove(blockButton);
            entryPanel.add(new JLabel("Blocked")).setFont(new Font("Arial", Font.PLAIN, 14));
            entryPanel.revalidate();
            entryPanel.repaint(); // Update UI after blocking
        });

        // Add components to the panel
        entryPanel.add(viewProfileButton);
        entryPanel.add(blockButton);
        return entryPanel;
    }

// Helper method to create a panel for received friend requests
    private JPanel createFriendRecievePanel(User friend) {
        // Create a horizontal panel for displaying received friend requests
        String profileImagePath = (friend.getProfile() != null)
                ? friend.getProfile().getProfilePhotoPath()
                : null;
        EntryPanel entryPanel = new EntryPanel(friend.getUsername(), profileImagePath);
        entryPanel.setPreferredSize(new Dimension(200, 100));

        JButton viewProfileButton = new JButton("View Profile");
        JButton acceptButton = new JButton("Accept");
        JButton declineButton = new JButton("Decline");
        JButton blockButton = new JButton("Block");

        // Event for viewing the user's profile
        viewProfileButton.addActionListener(evt -> {
            UserProfile userProfile = new UserProfile(friend);
            userProfile.setVisible(true);
            System.out.println("Viewing profile of " + friend.getUsername());
        });

        // Event for accepting a friend request
        acceptButton.addActionListener(evt -> {
            friendService.acceptFriendRequest(friend);
            database.saveUsersToFile(); // Save changes to the database
            entryPanel.remove(acceptButton);
            entryPanel.remove(declineButton);
            entryPanel.remove(blockButton);
            entryPanel.add(new JLabel("Accepted")).setFont(new Font("Arial", Font.PLAIN, 14));
            entryPanel.add(blockButton);
            entryPanel.repaint(); // Update UI after accepting
        });

        // Event for declining a friend request
        declineButton.addActionListener(evt -> {
            friendService.declineFriendRequest(friend);
            database.saveUsersToFile(); // Save changes to the database          
            entryPanel.remove(acceptButton);
            entryPanel.remove(declineButton);
            entryPanel.remove(blockButton);
            entryPanel.add(new JLabel("Declined")).setFont(new Font("Arial", Font.PLAIN, 14));
            entryPanel.add(blockButton);
            entryPanel.repaint(); // Update UI after declining
        });

        blockButton.addActionListener(evt -> {
            friendService.blockFriend(friend);
            entryPanel.remove(viewProfileButton);
            entryPanel.remove(blockButton);
            entryPanel.remove(acceptButton);
            entryPanel.remove(declineButton);
            entryPanel.add(new JLabel("Blocked")).setFont(new Font("Arial", Font.PLAIN, 14));
            entryPanel.revalidate();
            entryPanel.repaint(); // Update UI after blocking
        });

        // Add components to the panel
        
        entryPanel.add(viewProfileButton);
        entryPanel.add(acceptButton);
        entryPanel.add(declineButton);
        return entryPanel;
    }

   

    public void loadnewsfeed() {
        Notifications_panel.removeAll();
        loadFriendRequests();
        loadrequests();
        loadFriends();
        loadPosts();
        loadfriendstories();
        loadnotifications();

        searchContainer.removeAll();
        searchContainer.revalidate();
        searchContainer.repaint();
        jTextField1.setText("");
    }

    public void loadPosts() {
        Friendpostspanel.removeAll();
        ArrayList<Content> allfriendsposts = new ArrayList<>();
        ArrayList<User> friends = new ArrayList<>();
        for (String friendid : user.getFriendManager().getFriendList()) {
            friends.add(UserManager.findUser(friendid));
        }
        for (User friend : friends) {
            for (Content post : friend.getPostManager().getContent()) {
                allfriendsposts.add(post);

            }
        }
        Collections.sort(allfriendsposts, (p1, p2) -> p2.getTimestamp().compareTo(p1.getTimestamp()));

        // Add PostPanel for each post (text first, then image)
        for (Content post : allfriendsposts) {
            String username = UserManager.findUser(post.getAuthorId()).getUsername();
            String profilepath = UserManager.findUser(post.getAuthorId()).getProfile().getProfilePhotoPath();
            Friendpostspanel.add(new PostPanel(username, profilepath, post.getContent(), post.getImagePath()));
            allPosts.add(post);
        }

        Friendpostspanel.revalidate();
        Friendpostspanel.repaint();
    }

    public JPanel requests(User user1, Group g) {
        EntryPanel entryPanel = new EntryPanel(user.getUsername(), user.getProfile().getProfilePhotoPath());
        JLabel messageLabel = new JLabel("has requested to join group " + g.getName());
        entryPanel.add(messageLabel);
        JButton acceptButton = new JButton();
        JButton declineButton = new JButton();
        acceptButton.setText("Accept");
        declineButton.setText("Declined");
        GroupRole role = user.getGroups().get(g.getGroupId());
        switch (role) {
            case GroupAdmin groupAdmin -> {
                
                acceptButton.addActionListener(e -> {
                    groupAdmin.approveRequest(user1.getUserId());
                    entryPanel.remove(acceptButton);
                    entryPanel.remove(declineButton);
                    entryPanel.add(new JLabel("Accepted")).setFont(new Font("Arial", Font.PLAIN, 14));
                });
                declineButton.addActionListener(e -> {
                    groupAdmin.declineRequest(user1.getUserId());
                    
                    entryPanel.remove(acceptButton);
                    entryPanel.remove(declineButton);
                    entryPanel.add(new JLabel("Declined")).setFont(new Font("Arial", Font.PLAIN, 14));
                });
            }
            case GroupCoAdmin groupCoAdmin -> {
                
                acceptButton.addActionListener(e -> {
                    groupCoAdmin.approveRequest(user1.getUserId());
                    entryPanel.remove(acceptButton);
                    entryPanel.remove(declineButton);
                    entryPanel.add(new JLabel("Accepted")).setFont(new Font("Arial", Font.PLAIN, 14));
                });
                declineButton.addActionListener(e -> {
                    groupCoAdmin.declineRequest(user1.getUserId());
                    entryPanel.remove(acceptButton);
                    entryPanel.remove(declineButton);
                    entryPanel.add(new JLabel("Declined")).setFont(new Font("Arial", Font.PLAIN, 14));
                });
                
            }
            default -> {
            }
        }
        entryPanel.add(acceptButton);
        entryPanel.add(declineButton);
        return entryPanel;

    }

    public void loadrequests() {

        for (String groupID : user.getGroups().keySet()) {
            Group g = GroupManager.findGroupById(groupID);
            GroupRole role = user.getGroups().get(g.getGroupId());
            if (role instanceof GroupAdmin) {
                for (String request : g.getGroupRequests()) {
                    User user1 = UserManager.findUser(request);
                    JPanel entryJPanel = requests(user1, g);
                    Notifications_panel.add(entryJPanel);

                }
            } else if (role instanceof GroupCoAdmin) {
                for (String request : g.getGroupRequests()) {
                    User user1 = UserManager.findUser(request);
                    JPanel entryJPanel = requests(user1, g);
                    Notifications_panel.add(entryJPanel);
                }
            }

        }
    }

    public void loadnotifications() {

        for (String groupID : user.getGroups().keySet()) {
            Group g = GroupManager.findGroupById(groupID);
            for (Post post : g.getPosts()) {
                allPosts.add(post);
            }
        }
        Collections.sort(allPosts, (p1, p2) -> p2.getTimestamp().compareTo(p1.getTimestamp()));
        for (Content post : allPosts) {
            if (!user.getUserId().equals(post.getAuthorId())) {
                String username = UserManager.findUser(post.getAuthorId()).getUsername();
                String profilepath = UserManager.findUser(post.getAuthorId()).getProfile().getProfilePhotoPath();
                Notifications_panel.add(new NotificationsPanel(post, profilepath, username, friendService));

            }
        }
    }

    public void loadFriends() {
        ContainerPanel1.removeAll();
        ArrayList<User> friends = new ArrayList<>();
        for (String friendid : user.getFriendManager().getFriendList()) {
            friends.add(UserManager.findUser(friendid));
        }
        for (User friend : friends) {
            String username = friend.getUsername();
            String profileImagePath = (friend.getProfile() != null) ? friend.getProfile().getProfilePhotoPath() : null;
            int x = friend.isIsOnline() ? 1 : 0;
            FriendPanel friendPanel = new FriendPanel(username, profileImagePath, x);
            friendPanel.setPreferredSize(new java.awt.Dimension(80, 80));  // Consistent size for each friend panel

            ContainerPanel1.add(friendPanel);
        }
        ContainerPanel1.revalidate();
        ContainerPanel1.repaint();
    }

    public void loadfriendstories() {
        container2Panel.removeAll();
        ArrayList<User> friends = new ArrayList<>();
        for (String friendid : user.getFriendManager().getFriendList()) {
            User friend = UserManager.findUser(friendid);
            if (friend.getStoryManager().getContent().isEmpty()) {
                friends.add(friend);

            }
        }
        for (User friend : friends) {
            StoryPanel storyPanel = new StoryPanel(friend);
            container2Panel.add(storyPanel);

        }
        container2Panel.revalidate();
        container2Panel.repaint();
    }

    public void loadFriendRequests() {
        // Clear the current content of the Notifications_panel

        // Get the received friend requests from the user's manager
        Map<String, String> receivedFriendRequests = user.getFriendRequestManagable().getReceivedFriendRequests();
        Map<String, String> sentFriendRequests = user.getFriendRequestManagable().getSentFriendRequests();

        // Loop through the map and add a NotificationPanel for each friend request
        for (Map.Entry<String, String> entry : receivedFriendRequests.entrySet()) {
            String friendId = entry.getKey(); // The user ID
            String requestStatus = entry.getValue(); // The status of the request (e.g., "pending", "accepted", etc.)

            // Find the User object using the userManager's findUser method
            User friend = UserManager.findUser(friendId);

            if (friend != null && requestStatus.equals("Pending")) {
                // Add the NotificationPanel to the Notifications_panel
                Notifications_panel.add(new NotificationsPanel(friend, friend.getUsername(), friend.getProfile().getProfilePhotoPath(), friendService));
            }
        }
        for (Map.Entry<String, String> entry : sentFriendRequests.entrySet()) {
            String friendId = entry.getKey(); // The user ID
            String requestStatus = entry.getValue(); // The status of the request (e.g., "pending", "accepted", etc.)

            // Find the User object using the userManager's findUser method
            User friend = UserManager.findUser(friendId);

            if (friend != null && requestStatus.equals("Accepted") || requestStatus.equals("Declined")) {
                // Add the NotificationPanel to the Notifications_panel
                Notifications_panel.add(new NotificationsPanel(friend, friend.getUsername(), friend.getProfile().getProfilePhotoPath(), friendService, requestStatus));
            }
        }

        // Refresh the panel to display updated notifications
        Notifications_panel.revalidate();
        Notifications_panel.repaint();
    }

    public void loadGroupSuggestions() {
        container2Panel.removeAll();

        ArrayList<Group> suggestions = groupManager.suggestions();

        for (Group suggestion : suggestions) {
            if (!suggestion.getGroupRequests().contains(user.getUserId()) && !user.getGroups().containsKey(suggestion.getGroupId())) {
                JPanel suggestionPanel = restOfGroupPanel(suggestion);
                container2Panel.add(suggestionPanel);
                container2Panel.revalidate();
                container2Panel.repaint();
            }
        }
        container2Panel.revalidate();
        container2Panel.repaint();
    }

    public void loadFriendSuggestions() {
        container2Panel.removeAll();

        ArrayList<User> suggestions = friendService.suggestions();

        for (User suggestion : suggestions) {
            if (!user.getFriendRequestManagable().getSentFriendRequests().containsKey(suggestion.getUserId()) && !user.getFriendRequestManagable().getReceivedFriendRequests().containsKey(suggestion.getUserId())) {
                    JPanel entryPanel = createSuggestionPanel(suggestion);
                    container2Panel.add(entryPanel);
                    container2Panel.revalidate();
        container2Panel.repaint();
    }}}

     private JPanel createSuggestionPanel(User nonFriend) {
        String profileImagePath = (nonFriend.getProfile() != null)
                ? nonFriend.getProfile().getProfilePhotoPath()
                : null;
        EntryPanel entryPanel = new EntryPanel(nonFriend.getUsername(), profileImagePath);
        entryPanel.setPreferredSize(new Dimension(200, 100));

        JButton viewProfileButton = new JButton("View Profile");
        JButton addButton = new JButton("Add Friend");
        JButton blockButton = new JButton("Block");

        // Event for viewing the user's profile
        viewProfileButton.addActionListener(evt -> {
            UserProfile userProfile = new UserProfile(nonFriend);
            userProfile.setVisible(true);
            System.out.println("Viewing profile of " + nonFriend.getUsername());
        });

        // Event for sending a friend request
        addButton.addActionListener(evt -> {
            friendService.sendFriendRequest(nonFriend);
            System.out.println(user.getFriendRequestManagable().getSentFriendRequests());
            entryPanel.remove(addButton);
            entryPanel.remove(blockButton);
            entryPanel.add(new JLabel("Sent")).setFont(new Font("Arial", Font.PLAIN, 14));
            entryPanel.add(blockButton);
            database.saveUsersToFile();
            entryPanel.revalidate();
            entryPanel.repaint(); // Update UI after sending a request
        });

        // Event for blocking a user
        blockButton.addActionListener(evt -> {
            friendService.blockFriend(nonFriend);
            entryPanel.remove(viewProfileButton);
            entryPanel.remove(addButton);
            entryPanel.remove(blockButton);
            entryPanel.add(new JLabel("Blocked")).setFont(new Font("Arial", Font.PLAIN, 14));
            entryPanel.revalidate();
            entryPanel.repaint(); // Update UI after blocking
        });

        // Add components to the suggestion panel
        
        entryPanel.add(Box.createRigidArea(new Dimension(100, 0)));
        entryPanel.add(viewProfileButton);
        entryPanel.add(addButton);
        entryPanel.add(blockButton);
        return entryPanel;
    }
    
    private void loadGroups() {
        ContainerPanel1.removeAll();
        System.out.println(user.getGroups());

        if (user.getGroups() != null) {
            ArrayList<String> keys = new ArrayList<>(user.getGroups().keySet());
            for (String groupid : keys) {
                System.out.println(groupid);

                for (Group group : groupDatabase.loadGroups()) {
                    if (group.getGroupId().equals(groupid)) {
                        ContainerPanel1.add(new GroupPanel(group, user));

                    }
                }

            }
        }
        ContainerPanel1.revalidate();
        ContainerPanel1.repaint();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ContainerPanel1;
    private javax.swing.JPanel Friendpostspanel;
    private javax.swing.JPanel Notifications_panel;
    private javax.swing.JButton Refresh_button;
    private javax.swing.JToggleButton ViewStories;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JPanel container2Panel;
    private javax.swing.JButton createGroup;
    private javax.swing.JButton create_content_button;
    private javax.swing.JButton friend_managment_button;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JToggleButton jToggleButton3;
    private javax.swing.JToggleButton jToggleButton4;
    private javax.swing.JButton profile;
    private javax.swing.JButton search;
    private javax.swing.JPanel searchContainer;
    private javax.swing.JToggleButton viewFriendSuggestions;
    private javax.swing.JToggleButton viewGroupSuggestions;
    // End of variables declaration//GEN-END:variables

}
